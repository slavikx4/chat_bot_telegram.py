import telebot
import sqlite3
import re
from telebot import types
import easyocr

bot = telebot.TeleBot("5830047699:AAEInZfoIfOc-y_fIkjIKsfTsBvLjTBh9lM")

connect = sqlite3.connect('Wallet.db', check_same_thread=False)
cursor = connect.cursor()

def pic_to_text(message):
    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    src = "C:/Users/slava/Downloads/Telegram Desktop/" + message.photo[-1].file_id
    with open(src, 'wb') as new_file:
        new_file.write(downloaded_file)

    reader = easyocr.Reader(['ru', 'en'])
    text = reader.readtext(src, detail=0)

    stroka = " ".join(text)
    separation_text(message, stroka)

def separation_text(message, stroka):
    text_handler = re.findall(r"\D+\d+\D\d+", stroka)

    add_to_base(message, text_handler)

def add_to_base(message, text_handler):
    people_id = message.chat.id
    for product in text_handler:
        value = re.findall(r"\d+\D\d+", product)
        name = re.findall(r"\D+", product)
        cursor.execute("INSERT INTO records(user_id, operation, product, value) VALUES (?, ?, ?, ?)", (people_id, "–∫—É–ø–ª–µ–Ω–æ", name[0], value[0]))
        connect.commit()
    bot.send_message(message.chat.id, f"‚úÖ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ")

def button(message: types.Message):
    markup = types.ReplyKeyboardMarkup(is_persistent=False, resize_keyboard=True)
    earned = types.KeyboardButton("‚Üó")
    spent = types.KeyboardButton('‚Üò')
    history = types.KeyboardButton('üìä')
    markup.add(history, earned, spent)
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ç–æ–∫, –ª–∏–±–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é:", reply_markup=markup)

def fixation_earned(message):
    text = message.text
    people_id = message.chat.id
    value = ''.join(re.findall('\d', text))
    work = (re.findall(r"\D+", text))[0]
    cursor.execute("INSERT INTO records(user_id, operation, product,  value) VALUES(?, ?, ?, ?)", (people_id, '–∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ', work, value,))
    connect.commit()
    bot.send_message(message.chat.id, f"‚úÖ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ {value} {work}")
    button(message)

def fixation_spent(message):
    if(message.text is None):
        bot.send_message(message.chat.id, "P.S. –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")

        pic_to_text(message)
    else:
        text = message.text
        people_id = message.chat.id
        value = ''.join(re.findall('\d', text))
        product = re.findall(r"\D+", text)[0]
        cursor.execute("INSERT INTO records(user_id, operation, product,  value) VALUES(?, ?, ?, ?)", (people_id, '–∫—É–ø–ª–µ–Ω–æ', product, value,))
        connect.commit()
        bot.send_message(message.chat.id, f"‚úÖ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: –∫—É–ø–ª–µ–Ω–æ {product} {value}")
        button(message)

def get_balance(message):
    balance = 0
    for product in cursor.execute("SELECT operation, value FROM records WHERE user_id = ?", (message.chat.id,)):
        if product[0] == "–∫—É–ø–ª–µ–Ω–æ":
            balance -= product[1]
        else:
            balance += product[1]
    bot.send_message(message.chat.id, f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}")


@bot.message_handler(commands=['start'])
def handler_start(message):
    bot.send_message(message.chat.id, f"Hello, {message.from_user.first_name}")
    people_id = message.chat.id
    temp_res = cursor.execute("SELECT id FROM users WHERE user_id = ?", (people_id,))
    if temp_res.fetchone() is None:
        cursor.execute("INSERT INTO users(user_id) VALUES(?)", (people_id,))
        connect.commit()
    else:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    button(message)



@bot.message_handler(func=lambda message: "‚Üó" in message.text)
def handler_flow_earned(message):
    bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –∫–∞–∫?")
    bot.register_next_step_handler(message, fixation_earned)

@bot.message_handler(func=lambda message: "‚Üò" in message.text)
def handler_flow_spent(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å")
    bot.register_next_step_handler(message, fixation_spent)


@bot.message_handler(func=lambda message: "üìä" in message.text)
def handler_history(message):
    people_id = message.chat.id
    for product in cursor.execute("SELECT date, product, value FROM records WHERE user_id = ?", (people_id,)):
        bot.send_message(message.chat.id, f"{product[0]} {product[1]} {product[2]}")
    get_balance(message)

bot.infinity_polling()
